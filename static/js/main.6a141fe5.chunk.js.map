{"version":3,"sources":["components/UI/Input/Input.module.scss","components/Sidebar/Search/Search.module.scss","components/Sidebar/Rooms/RoomItem/RoomItem.module.scss","components/Header/Profile/Profile.module.scss","components/ChatBody/ChatBody.module.scss","hoc/Layout/Layout.module.scss","components/UI/Spinner/Spinner.module.scss","components/Sidebar/Sidebar.module.scss","components/ChatBody/Room/Room.module.scss","containers/Chat/Chat.module.scss","components/Header/Header.module.scss","components/ChatBody/Room/Message/Message.module.scss","serviceWorker.js","axios.js","store/actions/auth.js","store/actions/actionTypes.js","store/actions/chat.js","components/Modal/Modal.js","store/actions/profile.js","components/UI/Spinner/Spinner.js","components/Profile/Profile.js","containers/Auth/validate.js","components/UI/Input/Input.js","containers/Auth/Auth.js","components/Sidebar/Search/Search.js","components/Sidebar/Rooms/RoomItem/RoomItem.js","components/Sidebar/Rooms/Rooms.js","components/Sidebar/Sidebar.js","components/ChatBody/Room/Message/Message.js","components/ChatBody/Room/Room.js","components/ChatBody/MessageInput/MessageInput.js","components/ChatBody/ChatBody.js","containers/Chat/Chat.js","components/Header/Profile/Profile.js","components/Header/Header.js","hoc/Layout/Layout.js","App.js","store/reducers/auth.js","store/reducers/profile.js","store/reducers/chat.js","store/reducers/index.js","index.js","containers/Auth/Auth.module.scss","components/ChatBody/MessageInput/MessageInput.module.scss"],"names":["module","exports","InputWrap","FormGroup","Search","Autocomplete","Suggestions","Item","Active","NotRead","Menu","Profile","active","Container","Preview","Wrapper","App","Spinner","Sidebar","Room","Body","Header","IsOwner","Message","Status","Sending","NotReadBlock","Content","Owner","Time","Boolean","window","location","hostname","match","instance","axios","create","baseURL","defaults","withCredentials","initializeSuccess","payload","Object","objectSpread","type","socket","findRoom","_ref2","room","dispatch","getState","activeRoom","state","chat","_id","rooms","some","el","index","openRoom","createRoom","readMessages","_ref4","activeRoomIndex","_getState$chat$rooms$","notRead","emit","roomId","_ref5","showMessages","_state$chat","messages","_ref12","_ref13","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","get","concat","sent","data","stop","this","_x","_x2","apply","arguments","fetchMessages","_ref14","Modal","open","handleClickOpen","_this","setState","handleClose","message","props","react_default","createElement","Dialog_default","onClose","aria-labelledby","aria-describedby","DialogTitle_default","id","DialogActions_default","Button_default","onClick","color","autoFocus","React","Component","fetchProfile","info","spinner","className","classes","CircularProgress_default","ResponsiveDialog","close","handleOpenRoom","_this$props","userId","profileInfo","_this$props2","fullScreen","fetching","DialogContent_default","react","DialogContentText_default","email","connect","profile","_ref","_ref16","_ref17","_callee3","_context3","_x5","fetchRoom","withMobileDialog","validate","values","errors","password","eqpassword","test","length","undefined","renderField","input","label","_ref$meta","meta","touched","error","custom","objectWithoutProperties","boolError","FormControl_default","InputLabel_default","Input_default","assign","FormHelperText_default","Error","name","Field","component","Auth","submit","authType","post","status","map","SubmissionError","abrupt","initialized","logout","history","push","replace","handleSubmit","submitting","login","onSubmit","autoComplete","Input_Input","Buttons","variant","disabled","Link","to","Switch","reduxForm","form","onSubmitSuccess","results","withRouter","auth","cb","IntegrationDownshift","suggestions","loading","fetchSuggestions","event","value","target","handleChange","item","downshift","fetchUserProfile","clearSelection","_this2","downshift_esm","onChange","itemToString","_ref3","getInputProps","getItemProps","getMenuProps","highlightedIndex","isOpen","selectedItem","inputProps","InputProps","ref","other","TextField_default","inputRef","renderInput","fullWidth","placeholder","Paper_default","square","suggestion","itemProps","isHighlighted","MenuItem_default","key","selected","renderSuggestion","roomItem","roomName","click","classNames","join","roomsLoading","content","roomType","users","filter","owner","RoomItem","sidebar","Rooms","sameUser","statusClasses","moment","createdAt","format","scrolledUp","handleScrolledToTop","roomBody","scrollTop","scrollHeight","messagesLoading","_this$props$messages","_this$props$notRead","react_perfect_scrollbar_lib_default","containerRef","onScrollUp","i","same","console","log","includes","uniqId","roomLoading","MessageInput","e","handleEnterPress","ctrlKey","preventDefault","handleSendMessage","handleCtrlEnterPress","Date","send","uniqid","InputWrapper","react_textarea_autosize_esm_browser","Input","onKeyUp","onKeyPress","Button","_ref10","_state$auth","avatar","_ref6","sendMessageStart","sendMessage","ChatBody_Room_Room","ChatBody_MessageInput_MessageInput","Chat","fetchUserRooms","failed","ChatBody","_ref15","_callee2","notReadMessages","structNotReadMessages","_context2","forEach","messageId","_x3","_x4","show","handleClick","handleClickOutside","onClickOutside","initializing","Header_Profile_Profile","layout","children","initialize","socketInitialized","initializeSocket","showPopup","BrowserRouter","basename","Layout","components_Modal_Modal","Profile_Profile","Route","path","exact","render","containers_Chat_Chat","Redirect","containers_Auth_Auth","_ref$auth","then","catch","openSocket","on","_ref8","_ref9","_ref7","roomIndex","_getState$chat","roomIsOpen","roomIsExist","messageRoom","initialState","reducer","action","_","cloneDeep","toConsumableArray","newState","combineReducers","reduxFormReducer","composeEnhancers","compose","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","store","createStore","rootReducer","applyMiddleware","thunk","app","es","src_App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Placeholder"],"mappings":"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","file":"static/js/main.6a141fe5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputWrap\":\"Input_InputWrap__1Oh3w\",\"FormGroup\":\"Input_FormGroup__dHXan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__1UqHE\",\"Autocomplete\":\"Search_Autocomplete__3tVN_\",\"Suggestions\":\"Search_Suggestions__RZcAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"RoomItem_Item__37k_n\",\"Active\":\"RoomItem_Active__1neyn\",\"NotRead\":\"RoomItem_NotRead__13fFl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Profile_Menu__2mluK\",\"Profile\":\"Profile_Profile__3agOE\",\"active\":\"Profile_active__12t4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ChatBody_Container__35hNP\",\"Preview\":\"ChatBody_Preview__2RE8A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Layout_Wrapper__ExLx6\",\"App\":\"Layout_App__2PNTY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__3rQJ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__3TdYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Room\":\"Room_Room__4h6i7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Body\":\"Chat_Body__3gWvU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__19x8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IsOwner\":\"Message_IsOwner__3zz94\",\"Body\":\"Message_Body__1owYx\",\"Message\":\"Message_Message__1VYvD\",\"Status\":\"Message_Status__MQWiX\",\"Sending\":\"Message_Sending__2F68P\",\"NotReadBlock\":\"Message_NotReadBlock__3BasI\",\"Content\":\"Message_Content__3aCXk\",\"Owner\":\"Message_Owner__2r8f2\",\"Time\":\"Message_Time__KLZNs\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\r\n\r\nvar instance = axios.create({\r\n  baseURL: \"https://flashy-pilot.glitch.me/\"\r\n});\r\n\r\ninstance.defaults.withCredentials = true;\r\n\r\nexport default instance;\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nimport axios from \"../../axios\";\r\n\r\nconst initializeStart = () => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_START\r\n  };\r\n};\r\n\r\nexport const initializeSuccess = payload => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_SUCCESS,\r\n    ...payload\r\n  };\r\n};\r\n\r\nconst initializeFailed = () => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_FAILED\r\n  };\r\n};\r\n\r\nconst initializeError = ({ error }) => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_ERROR,\r\n    error\r\n  };\r\n};\r\n\r\nconst logoutStart = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT_START\r\n  };\r\n};\r\n\r\nconst logoutSuccess = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\nexport const logout = cb => {\r\n  return async dispatch => {\r\n    dispatch(logoutStart());\r\n    axios.get(\"/logout\");\r\n    cb();\r\n    dispatch(logoutSuccess());\r\n  };\r\n};\r\n\r\nexport const initialize = () => {\r\n  return async dispatch => {\r\n    dispatch(initializeStart());\r\n\r\n    axios\r\n      .post(\"/initialize\")\r\n      .then(res => {\r\n        if (res.data.status !== \"OK\") return dispatch(initializeFailed());\r\n        dispatch(initializeSuccess(res.data.payload));\r\n      })\r\n      .catch(error => dispatch(initializeError({ error })));\r\n  };\r\n};\r\n","export const INITIALIZE_START = \"INITIALIZE_START\";\r\nexport const INITIALIZE_FAILED = \"INITIALIZE_FAILED\";\r\nexport const INITIALIZE_SUCCESS = \"INITIALIZE_SUCCESS\";\r\nexport const INITIALIZE_ERROR = \"INITIALIZE_ERROR\";\r\n\r\nexport const SOCKET_INIT_SUCCESS = \"SOCKET_INIT_SUCCESS\";\r\n\r\nexport const LOGOUT_START = \"LOGOUT_START\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\n\r\nexport const FETCH_PROFILE_START = \"FETCH_PROFILE_START\";\r\nexport const FETCH_PROFILE_SUCCESS = \"FETCH_PROFILE_SUCCESS\";\r\nexport const FETCH_PROFILE_ERROR = \"FETCH_PROFILE_ERROR\";\r\nexport const CLOSE_PROFILE = \"CLOSE_PROFILE\";\r\n\r\nexport const FETCH_ROOMS_START = \"FETCH_ROOMS_START\";\r\nexport const FETCH_ROOMS_SUCCESS = \"FETCH_ROOMS_SUCCESS\";\r\nexport const FETCH_ROOMS_ERROR = \"FETCH_ROOMS_ERROR\";\r\n\r\nexport const FETCH_ROOM_START = \"FETCH_ROOM_START\";\r\nexport const FETCH_ROOM_SUCCESS = \"FETCH_ROOM_SUCCESS\";\r\nexport const FETCH_ROOM_ERROR = \"FETCH_ROOM_ERROR\";\r\n\r\nexport const OPEN_ROOM = \"OPEN_ROOM\";\r\nexport const CREATE_ROOM = \"CREATE_ROOM\";\r\n\r\nexport const FETCH_MESSAGES_START = \"FETCH_MESSAGES_START\";\r\nexport const FETCH_MESSAGES_SUCCESS = \"FETCH_MESSAGES_SUCCESS\";\r\nexport const FETCH_MESSAGES_ERROR = \"FETCH_MESSAGES_ERROR\";\r\nexport const SHOW_MESSAGES = \"SHOW_MESSAGES\";\r\n\r\nexport const SEND_MESSAGE_START = \"SEND_MESSAGE_START\";\r\nexport const SEND_MESSAGE_SUCCESS = \"SEND_MESSAGE_SUCCESS\";\r\nexport const SEND_MESSAGE_ERROR = \"SEND_MESSAGE_ERROR\";\r\n\r\nexport const PUSHED_MESSAGE = \"PUSHED_MESSAGE\";\r\n\r\nexport const READ_MESSAGES = \"READ_MESSAGES\";\r\nexport const MESSAGES_WAS_READ = \"MESSAGES_WAS_READ\";\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"../../axios\";\r\nimport openSocket from \"socket.io-client\";\r\n\r\nlet socket = null;\r\n\r\nconst fetchRoomsStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_ROOMS_START\r\n  };\r\n};\r\n\r\nconst fetchRoomsSuccess = ({ rooms }) => {\r\n  return {\r\n    type: actionTypes.FETCH_ROOMS_SUCCESS,\r\n    rooms\r\n  };\r\n};\r\n\r\nconst fetchRoomStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_ROOM_START\r\n  };\r\n};\r\n\r\nconst fetchRoomSuccess = () => {\r\n  return {\r\n    type: actionTypes.FETCH_ROOM_SUCCESS\r\n  };\r\n};\r\n\r\nconst findRoom = ({ room }) => {\r\n  return (dispatch, getState) => {\r\n    let state = getState().chat;\r\n    let { _id } = room;\r\n    let activeRoom;\r\n\r\n    let roomIsExist = state.rooms.some((el, index) => {\r\n      activeRoom = index;\r\n      return el._id === _id;\r\n    });\r\n\r\n    if (roomIsExist) return dispatch(openRoom({ index: activeRoom }));\r\n\r\n    dispatch(createRoom({ room }));\r\n  };\r\n};\r\n\r\nconst openRoomAction = ({ index }) => {\r\n  return {\r\n    type: actionTypes.OPEN_ROOM,\r\n    activeRoomIndex: index\r\n  };\r\n};\r\n\r\nconst readMessages = ({ activeRoomIndex }) => {\r\n  return (dispatch, getState) => {\r\n    const { _id, notRead } = getState().chat.rooms[activeRoomIndex];\r\n    socket.emit(\"read messages\", { roomId: _id, notRead });\r\n    dispatch({\r\n      type: actionTypes.READ_MESSAGES,\r\n      activeRoomIndex\r\n    });\r\n  };\r\n};\r\n\r\nexport const openRoom = ({ index }) => {\r\n  return dispatch => {\r\n    dispatch(openRoomAction({ index }));\r\n    dispatch(showMessages());\r\n  };\r\n};\r\n\r\nconst sendMessageStart = ({ uniqId, message }) => {\r\n  return {\r\n    type: actionTypes.SEND_MESSAGE_START,\r\n    message,\r\n    uniqId\r\n  };\r\n};\r\n\r\nconst sendMessageSuccess = ({ message, uniqId }) => {\r\n  return {\r\n    type: actionTypes.SEND_MESSAGE_SUCCESS,\r\n    message,\r\n    uniqId\r\n  };\r\n};\r\n\r\n// const sendMessageError = () => {\r\n//   return {\r\n//     type: actionTypes.SEND_MESSAGE_ERROR\r\n//   };\r\n// };\r\n\r\nexport const initializeSocket = () => {\r\n  return (dispatch, getState) => {\r\n    socket = openSocket(\"https://flashy-pilot.glitch.me/\");\r\n\r\n    socket.on(\"connect\", () => {\r\n      dispatch({\r\n        type: actionTypes.SOCKET_INIT_SUCCESS\r\n      });\r\n    });\r\n\r\n    socket.on(\"message was read\", ({ messages }) => {\r\n      dispatch({\r\n        type: actionTypes.MESSAGES_WAS_READ,\r\n        messages\r\n      });\r\n    });\r\n\r\n    socket.on(\"message saved\", ({ uniqId, message }) => {\r\n      dispatch(sendMessageSuccess({ uniqId, message }));\r\n    });\r\n\r\n    socket.on(\"message\", message => {\r\n      let { rooms, activeRoomIndex } = getState().chat;\r\n      let roomIsOpen = false,\r\n        roomIsExist = false,\r\n        roomIndex,\r\n        messageRoom = message.room;\r\n\r\n      rooms.forEach((el, index) => {\r\n        if (el._id === messageRoom._id) {\r\n          roomIsExist = true;\r\n          roomIndex = index;\r\n        }\r\n      });\r\n\r\n      if (!roomIsExist) {\r\n        rooms !== undefined ? rooms.push(messageRoom) : (rooms = messageRoom);\r\n        roomIndex = rooms.length - 1;\r\n      }\r\n\r\n      let room = rooms[roomIndex];\r\n      let { messages } = room;\r\n\r\n      if (messages) messages.push(message);\r\n      if (!message.owner.owner)\r\n        room.notRead\r\n          ? room.notRead.push(message._id)\r\n          : (room.notRead = [message._id]);\r\n\r\n      if (roomIndex === activeRoomIndex) roomIsOpen = true;\r\n\r\n      dispatch({\r\n        type: actionTypes.PUSHED_MESSAGE,\r\n        rooms\r\n      });\r\n\r\n      if (roomIsOpen) dispatch(readMessages({ activeRoomIndex }));\r\n    });\r\n  };\r\n};\r\n\r\nexport const sendMessage = ({ uniqId, message }) => {\r\n  return (dispatch, getState) => {\r\n    const state = getState();\r\n    const { activeRoomIndex } = state.chat;\r\n    const { email, avatar } = state.auth;\r\n    const roomId = state.chat.rooms[activeRoomIndex]._id;\r\n    message.owner = { email, avatar, owner: true };\r\n    dispatch(sendMessageStart({ uniqId, message }));\r\n    socket.emit(\"message\", { uniqId, message: { ...message, room: roomId } });\r\n  };\r\n};\r\n\r\nconst fetchMessagesStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_MESSAGES_START\r\n  };\r\n};\r\n\r\nconst fetchMessagesSuccess = ({ messages }) => {\r\n  return {\r\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\r\n    messages\r\n  };\r\n};\r\n\r\nconst fetchMessages = ({ roomId }) => {\r\n  return async (dispatch, getState) => {\r\n    let { activeRoomIndex } = getState().chat;\r\n    dispatch(fetchMessagesStart());\r\n    let res = await axios.get(`/messages?id=${roomId}`);\r\n    let messages = res.data.messages;\r\n    dispatch(fetchMessagesSuccess({ messages }));\r\n    dispatch(readMessages({ activeRoomIndex }));\r\n  };\r\n};\r\n\r\nconst showMessages = () => {\r\n  return (dispatch, getState) => {\r\n    const state = getState();\r\n    const { rooms, activeRoomIndex } = state.chat;\r\n    const messages = rooms[activeRoomIndex].messages;\r\n    const roomId = rooms[activeRoomIndex]._id;\r\n    if (!messages) {\r\n      dispatch(fetchMessages({ roomId }));\r\n    } else {\r\n      dispatch(readMessages({ activeRoomIndex }));\r\n    }\r\n  };\r\n};\r\n\r\nexport const createRoom = ({ room }) => {\r\n  return {\r\n    type: actionTypes.CREATE_ROOM,\r\n    room\r\n  };\r\n};\r\n\r\nexport const fetchRooms = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(fetchRoomsStart());\r\n\r\n    let { notReadMessages } = getState().auth;\r\n    let structNotReadMessages = {};\r\n\r\n    notReadMessages &&\r\n      notReadMessages.forEach(el => {\r\n        let room = structNotReadMessages[el.roomId];\r\n        if (room) room.push(el.messageId);\r\n        else structNotReadMessages[el.roomId] = [el.messageId];\r\n      });\r\n\r\n    let res = await axios.get(`/rooms`);\r\n    const { rooms } = res.data;\r\n\r\n    rooms.forEach(el => {\r\n      if (el._id in structNotReadMessages)\r\n        el.notRead = structNotReadMessages[el._id];\r\n    });\r\n\r\n    dispatch(fetchRoomsSuccess({ rooms }));\r\n  };\r\n};\r\n\r\nexport const fetchRoom = ({ userId }) => {\r\n  return async dispatch => {\r\n    dispatch(fetchRoomStart());\r\n    let res = await axios.get(`/room?user=${userId}`);\r\n    const { room } = res.data;\r\n    dispatch(fetchRoomSuccess());\r\n    dispatch(findRoom({ room }));\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nclass Modal extends React.Component {\r\n  state = {\r\n    open: true\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    const { message } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{message}</DialogTitle>\r\n          \r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\" autoFocus>\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n\r\n// class Modal extends React.Component {\r\n//   state = {\r\n//     show: true\r\n//   };\r\n\r\n//   closeHandler = () => {\r\n//     this.setState({ show: false });\r\n//   };\r\n\r\n//   render() {\r\n//     const { error, message } = this.props;\r\n//     const modal = this.state.show ? (\r\n//       <div className={classes.Modal}>\r\n//         <div className={classes.ModalBody}>\r\n//           {error ? <Error close={this.closeHandler} message={message} /> : null}\r\n//         </div>\r\n//       </div>\r\n//     ) : null;\r\n//     return modal;\r\n//   }\r\n// }\r\n\r\n// export default Modal;\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nimport axios from \"../../axios\";\r\n\r\nexport const closeProfile = () => {\r\n  return {\r\n    type: actionTypes.CLOSE_PROFILE\r\n  };\r\n};\r\n\r\nconst fetchProfileStart = () => {\r\n  return {\r\n    type: actionTypes.FETCH_PROFILE_START\r\n  };\r\n};\r\n\r\nconst fetchProfileSuccess = ({ info }) => {\r\n  return {\r\n    type: actionTypes.FETCH_PROFILE_SUCCESS,\r\n    info\r\n  };\r\n};\r\n\r\nconst fetchProfile = id => {\r\n  return async dispatch => {\r\n    dispatch(fetchProfileStart());\r\n    let res = await axios.get(`/user?id=${id}`);\r\n    const { info } = res.data;\r\n    dispatch(fetchProfileSuccess({ info }));\r\n  };\r\n};\r\n\r\nexport default fetchProfile;\r\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport classes from \"./Spinner.module.scss\";\r\n\r\nconst spinner = () => {\r\n  return (\r\n    <div className={classes.Spinner}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default spinner;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport withMobileDialog from \"@material-ui/core/withMobileDialog\";\r\n\r\nimport { closeProfile } from \"../../store/actions/profile\";\r\nimport { fetchRoom } from \"../../store/actions/chat\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\n\r\nclass ResponsiveDialog extends React.Component {\r\n  handleClose = () => {\r\n    const { close } = this.props;\r\n    close();\r\n  };\r\n\r\n  handleOpenRoom = () => {\r\n    const { close, openRoom } = this.props;\r\n    close();\r\n    openRoom({ userId: this.props.profileInfo.id });\r\n  };\r\n\r\n  render() {\r\n    const { fullScreen, fetching } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          fullScreen={fullScreen}\r\n          open\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n          <DialogContent>\r\n            {fetching ? (\r\n              <Spinner />\r\n            ) : (\r\n              <Fragment>\r\n                <DialogContentText>\r\n                  email: {this.props.profileInfo.email}\r\n                </DialogContentText>\r\n               \r\n              </Fragment>\r\n            )}\r\n          </DialogContent>\r\n          {!fetching && (\r\n            <DialogActions>\r\n              <Button onClick={this.handleClose} color=\"primary\">\r\n                Close\r\n              </Button>\r\n              <Button onClick={this.handleOpenRoom} color=\"primary\" autoFocus>\r\n                Chat\r\n              </Button>\r\n            </DialogActions>\r\n          )}\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nResponsiveDialog.propTypes = {\r\n  fullScreen: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    profileInfo: state.profile.info,\r\n    fetching: state.profile.fetching\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    close: () => dispatch(closeProfile()),\r\n    openRoom: ({ userId }) => dispatch(fetchRoom({ userId }))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withMobileDialog()(ResponsiveDialog));\r\n","const validate = values => {\r\n  const errors = {};\r\n  const { email, password, eqpassword } = values;\r\n\r\n  if (!email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n\r\n  if (!password) {\r\n    errors.password = \"Required\";\r\n  } else if (password.length < 6) {\r\n    errors.password = \"Must be 6 characters or more!\";\r\n  }\r\n\r\n  if (eqpassword !== undefined && !eqpassword) {\r\n    errors.eqpassword = \"Required\";\r\n  } else if (password !== eqpassword) {\r\n    errors.eqpassword = \"Must be equal to password!\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validate;\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nimport classes from \"./Input.module.scss\";\r\n\r\nconst renderField = ({ input, label, meta: { touched, error }, ...custom }) => {\r\n  let boolError = touched && !!error;\r\n  return (\r\n    <FormControl className={classes.FormGroup} error={boolError} aria-describedby=\"component-error-text\">\r\n      <InputLabel>{label}</InputLabel>\r\n      <Input {...input} {...custom} />\r\n      {boolError ? <FormHelperText className={classes.Error}>{error}</FormHelperText> : null}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst input = props => {\r\n  let { name, type, label } = props;\r\n  return (\r\n    <div className={classes.InputWrap}>\r\n      <Field name={name} type={type} component={renderField} label={label} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","import React, { Component } from \"react\";\r\nimport { reduxForm, SubmissionError } from \"redux-form\";\r\nimport validate from \"./validate\";\r\nimport axios from \"../../axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { initializeSuccess, logout } from \"../../store/actions/auth\";\r\n\r\nimport classes from \"./Auth.module.scss\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\n\r\nclass Auth extends Component {\r\n  componentDidUpdate() {\r\n    let { initialized, authType, logout, history } = this.props;\r\n    if (initialized) history.push(\"/\");\r\n    if (authType === \"logout\") {\r\n      logout(() => {\r\n        history.replace(\"/login\");\r\n      });\r\n    }\r\n  }\r\n\r\n  submit = async values => {\r\n    const { email, password } = values;\r\n    const { authType } = this.props;\r\n\r\n    let res = await axios.post(`/${authType}`, { email, password });\r\n\r\n    if (res.data.status === \"ERROR\") {\r\n      res.data.errors.map(el => {\r\n        throw new SubmissionError(el);\r\n      });\r\n    } else {\r\n      return res.data.payload;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { error, handleSubmit, submitting, authType } = this.props;\r\n\r\n    let login = authType === \"login\";\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n      \r\n        {error && <p className={classes.Error}>{error}</p>}\r\n\r\n        <form onSubmit={handleSubmit(this.submit)} autoComplete=\"off\">\r\n          <Input name=\"email\" type=\"email\" label=\"Email\" />\r\n          <Input name=\"password\" type=\"password\" label=\"Password\" />\r\n          {!login ? (\r\n            <Input name=\"eqpassword\" type=\"password\" label=\"Repeat password\" />\r\n          ) : null}\r\n\r\n          <div className={classes.Buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              disabled={submitting}\r\n            >\r\n              {login ? \"Log In\" : \"Sign In\"}\r\n            </Button>\r\n            {login ? (\r\n              <Link to=\"/signin\" className={classes.Switch}>\r\n                Sign In\r\n              </Link>\r\n            ) : (\r\n              <Link to=\"/login\" className={classes.Switch}>\r\n                Log In\r\n              </Link>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reduxForm({\r\n  form: \"auth\", // a unique identifier for this form\r\n  validate,\r\n  onSubmitSuccess: (results, dispatch) => {\r\n    dispatch(initializeSuccess(results));\r\n  }\r\n})(\r\n  withRouter(\r\n    connect(\r\n      state => {\r\n        return {\r\n          initialized: state.auth.initialized\r\n        };\r\n      },\r\n      dispatch => {\r\n        return {\r\n          logout: cb => dispatch(logout(cb))\r\n        };\r\n      }\r\n    )(Auth)\r\n  )\r\n);\r\n","import React from \"react\";\r\nimport Downshift from \"downshift\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport axios from \"../../../axios\";\r\n\r\nimport classes from \"./Search.module.scss\";\r\n\r\nimport fetchProfile from \"../../../store/actions/profile\";\r\n\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        ...InputProps\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion({ suggestion, index, itemProps, highlightedIndex }) {\r\n  const isHighlighted = highlightedIndex === index;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={suggestion.id}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nclass IntegrationDownshift extends React.Component {\r\n  state = {\r\n    suggestions: [],\r\n    loading: false\r\n  };\r\n\r\n  fetchSuggestions = async event => {\r\n    const { value } = event.target;\r\n    if (!value) return;\r\n    this.setState({ loading: true });\r\n    let res = await axios.get(`/users?q=${value}`);\r\n    let { suggestions } = res.data;\r\n    this.setState({ suggestions, loading: false });\r\n  };\r\n\r\n  handleChange = (item, downshift) => {\r\n    if (item) {\r\n      let id = item.id;\r\n      this.props.fetchUserProfile(id);\r\n    }\r\n    downshift.clearSelection();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Search}>\r\n        <Downshift\r\n          onChange={this.handleChange}\r\n          itemToString={item => (item ? item.label : \"\")}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            getItemProps,\r\n            getMenuProps,\r\n            highlightedIndex,\r\n            isOpen,\r\n            selectedItem\r\n          }) => (\r\n            <div className={classes.Autocomplete}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                InputProps: getInputProps({\r\n                  placeholder: \"Search...\",\r\n                  onChange: this.fetchSuggestions\r\n                })\r\n              })}\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper square className={classes.Suggestions}>\r\n                    {this.state.loading && !this.state.suggestions.length\r\n                      ? \"Loading...\"\r\n                      : this.state.suggestions.map((suggestion, index) =>\r\n                          renderSuggestion({\r\n                            suggestion,\r\n                            index,\r\n                            itemProps: getItemProps({ item: suggestion }),\r\n                            highlightedIndex,\r\n                            selectedItem\r\n                          })\r\n                        )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Downshift>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  dispatch => {\r\n    return {\r\n      fetchUserProfile: id => dispatch(fetchProfile(id))\r\n    };\r\n  }\r\n)(IntegrationDownshift);\r\n","import React from \"react\";\r\nimport classes from \"./RoomItem.module.scss\";\r\n\r\nconst roomItem = props => {\r\n  const { roomName, click, active, notRead } = props;\r\n  let classNames = [classes.Item];\r\n  if (active) classNames.push(classes.Active);\r\n  return (\r\n    <div className={classNames.join(\" \")} onClick={click}>\r\n      <p>{roomName}</p>\r\n      {notRead && notRead.length ? (\r\n        <span className={classes.NotRead}>{notRead.length}</span>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default roomItem;\r\n","import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Spinner from \"../../UI/Spinner/Spinner\";\r\n\r\nimport RoomItem from \"./RoomItem/RoomItem\";\r\n\r\nimport { openRoom } from \"../../../store/actions/chat\";\r\n\r\nconst rooms = props => {\r\n  const { loading, rooms, openRoom, activeRoomIndex } = props;\r\n\r\n  let content = rooms.map((el, index) => {\r\n    const { roomType, users, notRead } = el;\r\n\r\n    let roomName = \"\";\r\n    if (roomType === \"dialog\")\r\n      roomName = users.filter(el => !el.owner)[0].email;\r\n    return (\r\n      <RoomItem\r\n        active={activeRoomIndex === index}\r\n        key={index}\r\n        roomName={roomName}\r\n        notRead={notRead}\r\n        click={() => openRoom({ index })}\r\n      />\r\n    );\r\n  });\r\n\r\n  if (loading) content = <Spinner />;\r\n  return <Fragment>{content}</Fragment>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.chat.roomsLoading,\r\n    rooms: state.chat.rooms,\r\n    activeRoomIndex: state.chat.activeRoomIndex\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openRoom: ({ index }) => dispatch(openRoom({ index }))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(rooms);\r\n","import React from \"react\";\r\nimport Search from \"./Search/Search\";\r\nimport Rooms from \"./Rooms/Rooms\";\r\n\r\nimport classes from \"./Sidebar.module.scss\";\r\n\r\nconst sidebar = () => {\r\n  return (\r\n    <div className={classes.Sidebar}>\r\n      <Search />\r\n      <Rooms />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default sidebar;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Message.module.scss\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst message = props => {\r\n  let { data, sameUser, notRead } = props;\r\n  let classNames = [classes.Message];\r\n  if (data.owner.owner) classNames.push(classes.IsOwner);\r\n  if (notRead) classNames.push(classes.NotReadBlock);\r\n  let statusClasses = [classes.Status];\r\n\r\n  switch (data.status) {\r\n    case \"not-read\":\r\n      statusClasses.push(classes.NotRead);\r\n      break;\r\n    case \"sending\":\r\n      statusClasses.push(classes.Sending);\r\n      break;\r\n    default:\r\n      statusClasses = null;\r\n      break;\r\n  }\r\n\r\n  let messageBody = (\r\n    <div className={classNames.join(\" \")}>\r\n      {!sameUser && (\r\n        <div className={classes.Owner}>\r\n          <p>{data.owner.email}</p>\r\n        </div>\r\n      )}\r\n      <div className={classes.Body}>\r\n        {data.owner.owner && statusClasses ? <span className={statusClasses.join(\" \")} /> : null}\r\n\r\n        <div className={classes.Content}>{data.content}</div>\r\n        <p className={classes.Time}>\r\n          {moment(data.createdAt).format(\"HH:mm:ss\")}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return messageBody;\r\n};\r\n\r\nexport default message;\r\n","import React, { Component } from \"react\";\r\nimport Spinner from \"../../UI/Spinner/Spinner\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Messages from \"./Message/Message\";\r\n\r\nimport classes from \"./Room.module.scss\";\r\n\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\n\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\nclass Room extends Component {\r\n  scrolledUp = false;\r\n\r\n  componentDidUpdate() {\r\n    this.roomBody.scrollTop = this.roomBody.scrollHeight;\r\n  }\r\n\r\n  handleScrolledToTop = () => {\r\n    this.scrolledUp = true;\r\n  };\r\n\r\n  render() {\r\n    const { loading, messagesLoading, messages = [], notRead = [] } = this.props;\r\n    return (\r\n      <PerfectScrollbar\r\n        containerRef={el => (this.roomBody = el)}\r\n        className={classes.Room}\r\n        onScrollUp={this.handleScrolledToTop}\r\n      >\r\n        {loading || messagesLoading ? <Spinner /> : null}\r\n        {messages.map((el, i) => {\r\n          let same = false;\r\n          if (\r\n            i > 0 &&\r\n            (messages[i - 1].owner._id === el.owner._id ||\r\n              messages[i - 1].owner.owner === el.owner.owner)\r\n          )\r\n            same = true;\r\n          console.log(notRead.includes(el._id))\r\n          return (\r\n            <Messages key={el._id || el.uniqId} notRead={notRead.includes(el._id)} sameUser={same} data={el} />\r\n          );\r\n        })}\r\n      </PerfectScrollbar>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.chat.roomLoading,\r\n    messagesLoading: state.chat.messagesLoading,\r\n    messages: state.chat.rooms[state.chat.activeRoomIndex].messages,\r\n    notRead: state.chat.rooms[state.chat.activeRoomIndex].notRead\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Room);\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./MessageInput.module.scss\";\r\nimport Textarea from \"react-textarea-autosize\";\r\n\r\nimport uniqid from \"uniqid\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { sendMessage } from \"../../../store/actions/chat\";\r\n\r\nclass MessageInput extends Component {\r\n  state = { message: \"\" };\r\n\r\n  handleChange = e => {\r\n    this.setState({ message: e.target.value });\r\n  };\r\n\r\n  handleEnterPress = e => {\r\n    if (e.key === \"Enter\" && !e.ctrlKey) {\r\n      e.preventDefault();\r\n      this.handleSendMessage();\r\n    }\r\n  };\r\n\r\n  handleCtrlEnterPress = e => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      e.preventDefault();\r\n      this.setState(state => ({ ...state, message: state.message + \"\\n\" }));\r\n    }\r\n  };\r\n\r\n  handleSendMessage = () => {\r\n    if (!this.state.message) return;\r\n    let message = {\r\n      type: \"text\",\r\n      content: this.state.message,\r\n      createdAt: new Date(),\r\n      status: \"sending\"\r\n    };\r\n    this.props.send({ uniqId: uniqid(), message });\r\n    this.setState({ message: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Container}>\r\n        <div className={classes.InputWrapper}>\r\n          <Textarea\r\n            placeholder=\"Type here...\"\r\n            onChange={this.handleChange}\r\n            className={classes.Input}\r\n            value={this.state.message}\r\n            onKeyUp={this.handleCtrlEnterPress}\r\n            onKeyPress={this.handleEnterPress}\r\n          />\r\n          {this.state.message ? (\r\n            <button className={classes.Button} onClick={this.handleSendMessage}>\r\n              Send\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    send: ({ message, uniqId }) => dispatch(sendMessage({ message, uniqId }))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(MessageInput);\r\n","import React, { Fragment } from \"react\";\r\nimport Room from \"./Room/Room\";\r\nimport MessageInput from \"./MessageInput/MessageInput\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./ChatBody.module.scss\";\r\n\r\nconst chatBody = props => {\r\n  const { activeRoomIndex } = props;\r\n  return (\r\n    <div className={classes.Container}>\r\n      {activeRoomIndex !== undefined ? (\r\n        <Fragment>\r\n          <Room />\r\n          <MessageInput />\r\n        </Fragment>\r\n      ) : (\r\n        <p className={classes.Preview}>\r\n          Please select a chat to start messaging\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(state => {\r\n  return {\r\n    activeRoomIndex: state.chat.activeRoomIndex\r\n  };\r\n})(chatBody);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport ChatBody from \"../../components/ChatBody/ChatBody\";\r\n\r\nimport classes from \"./Chat.module.scss\";\r\n\r\nimport { fetchRooms } from \"../../store/actions/chat\";\r\n\r\nclass Chat extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchUserRooms();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { failed } = this.props;\r\n    if (failed) {\r\n      this.props.history.replace(\"/login\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Body}>\r\n        <Sidebar />\r\n        <ChatBody />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    failed: state.auth.failed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchUserRooms: () => dispatch(fetchRooms())\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Chat)\r\n);\r\n","import React, { Component } from \"react\";\r\n\r\nimport classes from \"./Profile.module.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport onClickOutside from \"react-onclickoutside\";\r\n\r\nclass Profile extends Component {\r\n  state = {\r\n    show: false\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      show: true\r\n    });\r\n  };\r\n\r\n  handleClickOutside = () => {\r\n    this.setState({\r\n      show: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { email } = this.props;\r\n    return (\r\n      <div className={classes.Profile}>\r\n        <p\r\n          onClick={this.handleClick}\r\n          className={this.state.show ? classes.active : null}\r\n        >\r\n          {email}\r\n        </p>\r\n        {this.state.show ? (\r\n          <ul className={classes.Menu}>\r\n            <li>\r\n              <Link to=\"/logout\">logout</Link>\r\n            </li>\r\n          </ul>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(state => {\r\n  return {\r\n    email: state.auth.email,\r\n    avatar: state.auth.avatar,\r\n    initialized: state.auth.initialized\r\n  };\r\n})(onClickOutside(Profile));\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Profile from \"./Profile/Profile\";\r\n\r\nimport classes from \"./Header.module.scss\";\r\n\r\nconst header = props => {\r\n  let { initialized } = props;\r\n  return (\r\n    <header className={classes.Header}>\r\n      <h1>Sociable</h1>\r\n      {initialized ? <Profile /> : null}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default connect(state => {\r\n  return {\r\n    initializing: state.auth.initializing,\r\n    initialized: state.auth.initialized\r\n  };\r\n})(header);\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Layout.module.scss\";\r\nimport Header from \"../../components/Header/Header\";\r\n\r\nconst layout = props => {\r\n  return (\r\n    <div className={classes.Wrapper}>\r\n      <div className={classes.App}>\r\n        <Header />\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default layout;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { initialize } from \"./store/actions/auth\";\nimport { initializeSocket } from \"./store/actions/chat\";\n\nimport Modal from \"./components/Modal/Modal\";\n\nimport Profile from \"./components/Profile/Profile\";\n\nimport Spinner from \"./components/UI/Spinner/Spinner\";\n\nimport { Route, BrowserRouter, Switch, Redirect } from \"react-router-dom\";\nimport Auth from \"./containers/Auth/Auth\";\nimport Chat from \"./containers/Chat/Chat\";\nimport Layout from \"./hoc/Layout/Layout\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initialize();\n  }\n\n  componentDidUpdate() {\n    if (this.props.initialized && !this.props.socketInitialized) {\n      this.props.initializeSocket();\n    }\n  }\n\n  render() {\n    const { error, showPopup, initialized, initializing } = this.props;\n    return (\n      <BrowserRouter basename=\"/sociable\">\n        <Layout>\n          {error ? <Modal error message=\"Initializing error. Server.\" /> : null}\n          {showPopup ? <Profile /> : null}\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() =>\n                !initializing && initialized ? (\n                  <Chat />\n                ) : !initializing && !initialized ? (\n                  <Redirect to=\"/login\" />\n                ) : (\n                  <Spinner />\n                )\n              }\n            />\n            <Route path=\"/login\" render={() => <Auth authType=\"login\" />} />\n            <Route path=\"/signin\" render={() => <Auth authType=\"signin\" />} />\n            <Route path=\"/logout\" render={() => <Auth authType=\"logout\" />} />\n            <Route path=\"/\" render={() => <h1>404</h1>} />\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth: { email, avatar, error, initialized, initializing },\n  chat: { socketInitialized },\n  profile: { showPopup }\n}) => {\n  return {\n    initializing,\n    initialized,\n    socketInitialized,\n    email,\n    avatar,\n    error,\n    showPopup\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initialize: () => dispatch(initialize()),\n    initializeSocket: () => dispatch(initializeSocket())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  email: \"\",\r\n  avatar: \"\",\r\n  notReadMessages: [],\r\n  initializing: true,\r\n  initialized: false,\r\n  failed: false,\r\n  error: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGOUT_START:\r\n      return state;\r\n\r\n    case actionTypes.LOGOUT_SUCCESS:\r\n      return {\r\n        ...initialState,\r\n        failed: true\r\n      };\r\n\r\n    case actionTypes.INITIALIZE_START:\r\n      return {\r\n        ...state,\r\n        initializing: true\r\n      };\r\n\r\n    case actionTypes.INITIALIZE_SUCCESS:\r\n   \r\n      const { email, avatar, notReadMessages } = action;\r\n      return {\r\n        ...state,\r\n        email,\r\n        avatar,\r\n        notReadMessages,\r\n        initializing: false,\r\n        initialized: true,\r\n        failed: false\r\n      };\r\n\r\n    case actionTypes.INITIALIZE_FAILED:\r\n      return {\r\n        ...state,\r\n        initialized: false,\r\n        initializing: false,\r\n        failed: true\r\n      };\r\n\r\n    case actionTypes.INITIALIZE_ERROR:\r\n      return {\r\n        ...state,\r\n        initializing: false,\r\n        initialized: false,\r\n        error: action.error\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  info: {\r\n    avatar: null,\r\n    email: \"\",\r\n    id: null,\r\n    room: null\r\n  },\r\n  showPopup: false,\r\n  fetching: false,\r\n  error: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const { info, error } = action;\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_PROFILE_START:\r\n      return {\r\n        ...state,\r\n        fetching: true,\r\n        showPopup: true\r\n      };\r\n\r\n    case actionTypes.FETCH_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetching: false,\r\n        info\r\n      };\r\n\r\n    case actionTypes.FETCH_PROFILE_ERROR:\r\n      return {\r\n        ...state,\r\n        fetching: false,\r\n        error\r\n      };\r\n\r\n    case actionTypes.CLOSE_PROFILE:\r\n      return {\r\n        ...state,\r\n        showPopup: false\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport _ from \"lodash\";\r\n\r\nconst initialState = {\r\n  rooms: [],\r\n  activeRoomIndex: undefined,\r\n  roomsLoading: false,\r\n  roomLoading: false,\r\n  messagesLoading: false,\r\n  socketInitialized: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_ROOM_START:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomLoading: true\r\n      };\r\n\r\n    case actionTypes.FETCH_ROOM_SUCCESS:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomLoading: false\r\n      };\r\n\r\n    case actionTypes.FETCH_ROOM_ERROR:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomLoading: false\r\n      };\r\n\r\n    case actionTypes.FETCH_ROOMS_START:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomsLoading: true\r\n      };\r\n\r\n    case actionTypes.FETCH_ROOMS_SUCCESS:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomsLoading: false,\r\n        rooms: action.rooms\r\n      };\r\n\r\n    case actionTypes.FETCH_ROOMS_ERROR:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        roomsLoading: false\r\n      };\r\n\r\n    case actionTypes.OPEN_ROOM:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        activeRoomIndex: action.activeRoomIndex\r\n      };\r\n\r\n    case actionTypes.CREATE_ROOM:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        rooms: [action.room, ...state.rooms],\r\n        activeRoomIndex: 0\r\n      };\r\n\r\n    case actionTypes.FETCH_MESSAGES_START:\r\n      return {\r\n        ..._.cloneDeep(state),\r\n        messagesLoading: true\r\n      };\r\n\r\n    case actionTypes.FETCH_MESSAGES_SUCCESS: {\r\n      let newState = _.cloneDeep(state);\r\n      newState.rooms[state.activeRoomIndex].messages = action.messages;\r\n      newState.messagesLoading = false;\r\n      return newState;\r\n    }\r\n\r\n    case actionTypes.SEND_MESSAGE_START: {\r\n      let newState = _.cloneDeep(state);\r\n      let { message, uniqId } = action;\r\n      message.uniqId = uniqId;\r\n      newState.rooms[state.activeRoomIndex].messages\r\n        ? newState.rooms[state.activeRoomIndex].messages.push(message)\r\n        : (newState.rooms[state.activeRoomIndex].messages = [message]);\r\n      return newState;\r\n    }\r\n\r\n    case actionTypes.SEND_MESSAGE_SUCCESS: {\r\n      let { message, uniqId } = action;\r\n      let newState = _.cloneDeep(state);\r\n\r\n      try {\r\n        newState.rooms.forEach((el, index) => {\r\n          el.messages &&\r\n            el.messages.forEach((el, i) => {\r\n              if (el.uniqId === uniqId) {\r\n                message.owner = el.owner;\r\n                newState.rooms[index].messages[i] = message;\r\n                throw new Error(\"break loop\");\r\n              }\r\n            });\r\n        });\r\n      } catch (e) {\r\n        if (e.message !== \"break loop\") throw e;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case actionTypes.SOCKET_INIT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        socketInitialized: true\r\n      };\r\n\r\n    case actionTypes.PUSHED_MESSAGE: {\r\n      let newState = _.cloneDeep(state);\r\n      let rooms = _.cloneDeep(action.rooms);\r\n      return { ...newState, rooms: [...rooms] };\r\n    }\r\n\r\n    case actionTypes.READ_MESSAGES: {\r\n      let newState = _.cloneDeep(state);\r\n      let { activeRoomIndex } = action;\r\n      newState.rooms[activeRoomIndex].notRead = [];\r\n      return newState;\r\n    }\r\n\r\n    case actionTypes.MESSAGES_WAS_READ: {\r\n      let newState = _.cloneDeep(state);\r\n      let { messages } = action;\r\n      newState.rooms.forEach(el => {\r\n        el.messages &&\r\n          el.messages.forEach(message => {\r\n            if (messages.includes(message._id)) {\r\n              message.status = \"read\";\r\n            }\r\n          });\r\n      });\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\nimport { reducer as reduxFormReducer } from \"redux-form\";\r\nimport profile from \"./profile\";\r\nimport chat from \"./chat\";\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  form: reduxFormReducer,\r\n  profile,\r\n  chat\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\n\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./store/reducers/index\";\n\nconst composeEnhancers =\n  (process.env.NODE_ENV === \"development\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : null) || compose;\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2bc43\",\"Error\":\"Auth_Error__2PM-K\",\"Buttons\":\"Auth_Buttons__3LABR\",\"Switch\":\"Auth_Switch__3Qum1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MessageInput_Container__2FIuU\",\"Input\":\"MessageInput_Input__1nz7Z\",\"InputWrapper\":\"MessageInput_InputWrapper__1erff\",\"Placeholder\":\"MessageInput_Placeholder__-AMGB\"};"],"sourceRoot":""}